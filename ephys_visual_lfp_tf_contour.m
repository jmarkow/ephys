function [CONTOUR_SPECT]=ephys_visual_lfp_tf_contour(EPHYS_DATA,HISTOGRAM,CHANNELS,varargin)
%generates a song-aligned average spectrogram of the LFP using the contour method
%
%	[CONTOUR_SPECT=ephys_lfp_tf_contour(EPHYS_DATA,HISTOGRAM,CHANNELS,varargin)
%
%	EPHYS_DATA
%	aligned ephys data generated by ephys_cluster or in extracted_data/aggregated_data.mat
%	(should be the variable ephys_data), the data should be a matrix of doubles that is 
%	samples x trials x channels
%
%	HISTOGRAM
%	contour histogram returned by ephys_visual_histogram.m (or loaded from histogram.mat)
%
%	CHANNELS
%	channel labels (i.e. the channel that corresponds to a given element in the cell array
%	ephys_data) from ephys_cluster.m or extracted_data/aggregated_data.mat
%
%	CONTOUR_SPECT
%	structure containing the contour image and time and frequency labels
%
%	the following may be specified as parameter/value pairs:
%
%		car_exclude
%		electrodes to exclude from noise estimate
%
%		fs
%		data sampling rate (default: 25e3)
%
%		noise
%		noise rejection method ('car' for common average 'nn' for nearest neighbor, or 'none',
%		default: 'none')
%
%		freq_range
%		vector with two elements to specify the frequency range (one element specifies low pass, default: 300)
%
%		savedir
%		directory to store results (default: pwd)
%
%		hist_min_f
%		lowermost frequency to display for contour histogram (default: 1e3)
%
%		hist_max_f
%		uppermost frequency to display for contour histogram (default: 10e3)
%
%		lfp_min_f
%		lowermost frequency to display for contour histogram (default: 1)
%
%		lfp_max_f
%		uppermost frequency to display for contour histogram (default: 100)
%
%		scale
%		scale for LFP spectrogram amplitude (linear or log, default: log)
%
%		lfp_colors
%		colormap (string) for lfp data (default: jet)
%
%		hist_colors
%		colormap(string) for histogram (default: jet)
%
%		medfilt_scale
%		timescale for median filter (in ms, leave blank to skip, default: 1.5)
%
%		lfp_nfft
%		nfft for lfp spectrogram (default: 10e3)
%
%		lfp_n
%		window size for lfp spectrogram (default: 6250)
%
%		lfp_overlap
%		overlap for lfp spectrogram (default: 6000)%
%
%		singletrials
%		number of single trial spectrograms to plot
%
%		wsigma
%		timescales to use for contour analysis (in seconds, default:.05:.02:15)
%
%		angles
%		angles of analysis to use for contour consensus (in radians, default:-pi/4:pi/16:pi/4)
%
%		padding
%		zero pads to add to the beginning and end of LFP signal (in seconds, leave empty for no pad default: [])
%
%
%
% see also ephys_visual_sua.m,ephys_visual_lfp_amp.m,ephys_visual_mua.m,ephys_visual_lfp_tf.m,time_frequency_raster.m


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PARAMETER COLLECTION %%%%%%%%%%%%%%%%%


if nargin<3
	error('ephysPipeline:lfptfvis:notenoughparams','Need 3 arguments to continue, see documentation');
end

nparams=length(varargin);

if mod(nparams,2)>0
	error('ephysPipeline:argChk','Parameters must be specified as parameter/value pairs!');
end

fs=25e3;
noise='none'; 

car_exclude=[];
savedir=pwd;
hist_colors='jet';
lfp_colors='jet';
lfp_min_f=1; % bring down to 1
lfp_max_f=100;
lfp_n=512; % defined frequency resolution
lfp_overlap=511;
lfp_nfft=512; % superficial, makes the spectrogram smoother

proc_fs=500;

hist_min_f=1;
hist_max_f=10e3;

figtitle=[];
freq_range=[5 120]; % frequency range for filtering
filt_order=7;
channels=CHANNELS;
scale='linear';
scalelabel='P';
singletrials=5;
medfilt_scale=1.5; % median filter scale (in ms)

angles=-pi/4:pi/16:pi/4; % for contour image
wsigma=.05:.02:.15; %timescales in milliseconds;
padding=[];

for i=1:2:nparams
	switch lower(varargin{i})
		case 'fs'
			fs=varargin{i+1};
		case 'savedir'
			savedir=varargin{i+1};
		case 'hist_colors'
			hist_colors=varargin{i+1};
		case 'car_exclude'
			car_exclude=varargin{i+1};
		case 'figtitle'
			figtitle=varargin{i+1};
		case 'freq_range'
			freq_range=varargin{i+1};
		case 'filt_order'
			filt_order=varargin{i+1};
		case 'channels'
			channels=varargin{i+1};
		case 'noise'
			noise=varargin{i+1};
		case 'scale'
			scale=varargin{i+1};
		case 'lfp_min_f'
			lfp_min_f=varargin{i+1};
		case 'lfp_max_f'
			lfp_max_f=varargin{i+1};
		case 'lfp_colors'
			lfp_colors=varargin{i+1};
		case 'lfn_n'
			lfp_n=varargin{i+1};
		case 'lfp_nfft'
			lfp_nfft=varargin{i+1};
		case 'lfp_overlap'
			lfp_overlap=varargin{i+1};
		case 'proc_fs'
			proc_fs=varargin{i+1};
		case 'padding'
			padding=varargin{i+1};
		case 'wsigma'
			wsigma=varargin{i+1};
	end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SIGNAL CONDITIONING %%%%%%%%%%%%%%%%

% add padding if requested

[nsamples,ntrials,nchannels]=size(EPHYS_DATA);
ntimescales=length(wsigma);

if ~isempty(padding)
	padsamples=padding*fs;
	pad=zeros(padsamples,ntrials,nchannels);
	EPHYS_DATA=[pad;EPHYS_DATA;pad];
end

% denoise and condition the signal

downfact=fs/proc_fs;

if mod(downfact,1)>0
	error('ephysPipeline:spectcoherence:downsamplenotinteger','Need to downsample by integer');
end

proc_data=ephys_denoise_signal(EPHYS_DATA,CHANNELS,channels,'method',noise,'car_exclude',car_exclude);

[b,a]=butter(2,[200/(fs/2)],'low');

for i=1:size(proc_data,3)
	proc_data(:,:,i)=filtfilt(b,a,double(proc_data(:,:,i)));
end

proc_data=downsample(proc_data,downfact);
proc_data=ephys_condition_signal(proc_data,'l','freq_range',freq_range,'medfilt_scale',medfilt_scale,'medfilt',1,...
	'fs',proc_fs,'filt_order',filt_order);
proc_data=squeeze(proc_data);
clear EPHYS_DATA;

[nsamples,ntrials,nchannels]=size(proc_data);

% get rows and columns

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% get processing parameters

if lfp_n>nsamples
	difference=lfp_n-lfp_overlap;
	lfp_n=round(nsamples/5);
	lfp_overlap=lfp_n-difference;

	warning('ephysPipeline:lfptfcontour:notenoughsamples',...
		'Window size larger than the number of samples, settings window size to %d and ond overlap to %d',lfp_n,lfp_overlap);

end

% if nfft is empty set to nextpow2

if isempty(lfp_nfft)
	lfp_nfft=max([n 2^nextpow2(lfp_n)]);
else
	lfp_nfft=2^nextpow2(lfp_nfft);
end

[t,f,lfp_startidx,lfp_stopidx]=getspecgram_dim(nsamples,lfp_n,lfp_overlap,lfp_nfft,proc_fs,lfp_min_f,lfp_max_f);

if ~isempty(padding)
	t=t-padding;
end
rows=length(f);
columns=length(t);

CONTOUR_SPECT.t=t;
CONTOUR_SPECT.f=f;
CONTOUR_SPECT.image=zeros(length(f),length(t),length(channels),'single');
%CONTOUR_SPECT.gabor=zeros(size(CONTOUR_SPECT.image));
%CONTOUR_SPECT.consensus=zeros(size(CONTOUR_SPECT.gabor));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PLOTTING CODE %%%%%%%%%%%%%%%%%%%%%%

% create output directory

[path,name,ext]=fileparts(savedir);
savedir=fullfile(savedir,'lfp_tf','contour');

if ~exist(savedir,'dir')
	mkdir(fullfile(savedir));
end

% single trials go in a subdir

savefilename=[ name '_lfptf_electrode_'];

delete(fullfile(savedir,[savefilename '*']));

for i=1:length(channels)

	consensus_ave=zeros(rows,columns);
	gabor_ave=zeros(rows,columns);

	parfor j=1:ntrials

		disp([num2str(j)]);	
		consensus_tmp=zeros(rows,columns);
		gabor_tmp=zeros(rows,columns);

		currdata=proc_data(:,j,i);
		spect=[];

		for k=1:ntimescales

			% get the stft and reassignment

			[stft dx]=chirp_stft(currdata,'fs',proc_fs,'n',lfp_n,...
				'overlap',lfp_overlap,'nfft',lfp_nfft,'wsigma',wsigma(k));

			% build the complex contour image

			consensus=contour_consensus(stft,dx,angles);

			% accumulate

			consensus_tmp=consensus_tmp+consensus./ntimescales;
			gabor_tmp=gabor_tmp+stft./ntimescales;

		end

		% reduction to save memory, storing in a large matrix probably not viable for large n...
		
		consensus_ave=consensus_ave+consensus_tmp./ntrials;
		gabor_ave=gabor_ave+gabor_tmp./ntrials;

		
	end

	CONTOUR_SPECT.gabor(:,:,i)=gabor_ave;
	CONTOUR_SPECT.consensus(:,:,i)=consensus_ave;

	spect_ave_plot.image=abs(consensus_ave);
	spect_ave_plot.t=t;
	spect_ave_plot.f=f;

	if ~isempty(savedir)
		spect_fig=figure('visible','off','Units','Pixels','Position',[0 0 round(300*nsamples/proc_fs) 800]);

		fig_title=['CH' num2str(channels(i)) ' NTRIALS' num2str(ntrials)];

		spect_fig=time_frequency_raster(HISTOGRAM,spect_ave_plot,'fig_num',spect_fig,'fig_title',fig_title,'scale',scale,...
			'scalelabel',scalelabel,'hist_min_f',hist_min_f,'hist_max_f',hist_max_f,'tf_min_f',lfp_min_f,'tf_max_f',lfp_max_f,...
			'hist_colors',hist_colors,'tfimage_colors',lfp_colors);

		set(spect_fig,'PaperPositionMode','auto');

		multi_fig_save(spect_fig,savedir,...
			[ savefilename num2str(channels(i)) ],'png','res',100);
		close([spect_fig]);
	end

end

CONTOUR_SPECT.ntrials=ntrials;
CONTOUR_SPECT.timescales=wsigma;
CONTOUR_SPECT.angles=angles;
CONTOUR_SPECT.channels=CHANNELS;

if ~isempty(savedir)
	save(fullfile(savedir,'lfp_tf_data.mat'),'CHANNELS','channels','CONTOUR_SPECT');
end

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PARFOR SAVING %%%%%%%%%%%%%%%%%%%%%%

function parsave(FILE,t,f,spect)
	
save(FILE,'t','f','spect');

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
