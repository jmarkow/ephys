function [LFP_RASTER TIME LABEL HISTOGRAM]=ephys_lfp_amp(EPHYS_DATA,HISTOGRAM,CHANNELS,varargin)
%generates song-aligned LFP amplitude rasters
%
%	[LFP_RASTER TIME LABEL HISTOGRAM]=ephys_lfp_amp(MIC_DATA,EPHYS_DATA,CHANNELS,varargin)
%
%	EPHYS_DATA
%	aligned ephys data generated by ephys_cluster or in extracted_data/aggregated_data.mat
%	(should be the variable ephys_data), the data should be a matrix of doubles that is 
%	samples x trials x channels
%
%	HISTOGRAM
%	contour histogram returned by ephys_visual_histogram.m (or loaded from histogram.mat)
%
%	CHANNELS
%	channel labels (i.e. the channel that corresponds to a given element in the cell array
%	ephys_data) from ephys_cluster.m or extracted_data/aggregated_data.mat
%
%	the following may be specified as parameter/value pairs:
%
%		car_exclude
%		electrodes to exclude from noise estimate
%
%		SR
%		data sampling rate (default: 25e3)
%
%		noise
%		noise rejection method ('car' for common average 'nn' for nearest neighbor, or 'none',
%		default: 'none')
%
%		freq_range
%		vector with two elements to specify the frequency range (one element specifies low pass)
%
%		savedir
%		directory to store results (default: pwd)
%
%		min_f
%		lowermost frequency to display for contour histogram (default: 1e3)
%
%		max_f
%		uppermost frequency to display for contour histogram (default: 10e3)
%
%		mua_colors
%		colormap (string) for raster data (default: hot)
%
%		hist_colors
%		colormap(string) for histogram (default: jet)
%
%		medfilt_scale
%		timescale for median filter (in ms, leave blank to skip, default: 1.5)
%
%		hampel
%		a simple hampel or median filter is used to throw out noise trials for display
%		(all trials are stored regardless), basically the number specifies how many MADs
%		the rms on a particular trial must be from the median computed across trials (30 trial window)
%		to throw out 3-4 is standard, with lower being more aggresive (leave blank to skip, default: 3)
%
% see also ephys_visual_sua.m,ephys_visual_lfp_tf.m,ephys_visual_mua.m




if nargin<3 | isempty(CHANNELS), CHANNELS=1:16; end

nparams=length(varargin);

if mod(nparams,2)>0
	error('Parameters must be specified as parameter/value pairs');
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PARAMETER COLLECTION %%%%%%%%%%%%%%%%%

SR=25e3;
noise='none'; 
car_exclude=[];
savedir=pwd;
min_f=1e3;
max_f=10e3;
hist_colors='jet';
mua_colors='hot';
figtitle='';
freq_range=[10 80]; % frequency range for filtering
downsampling=2;
channels=CHANNELS;
medfilt_scale=1.5; % median filter scale (in ms)
hampel=3;

%%%

for i=1:2:nparams
	switch lower(varargin{i})
		case 'sr'
			SR=varargin{i+1};
		case 'noise'
			noise=varargin{i+1};
		case 'savedir'
			savedir=varargin{i+1};
		case 'min_f'
			min_f=varargin{i+1};
		case 'max_f'
			max_f=varargin{i+1};
		case 'mua_colors'
			mua_colors=varargin{i+1};
		case 'hist_colors'
			hist_colors=varargin{i+1};
		case 'car_exclude'
			car_exclude=varargin{i+1};
		case 'figtitle'
			figtitle=varargin{i+1};
		case 'freq_range'
			freq_range=varargin{i+1};
		case 'downsampling'
			downsampling=varargin{i+1};
		case 'channels'
			channels=varargin{i+1};
		case 'medfilt_scale'
			medfilt_scale=varargin{i+1};
		case 'hampel'
			hampel=varargin{i+1};
	end
end

if max_f>SR/2
	disp('Maximum Fs must be less than Nyquist!');
	disp('Resetting max fs');
	max_f==SR/2;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

[nsamples,ntrials,nchannels]=size(EPHYS_DATA);
TIME=[1:nsamples]./SR;

% denoise and condition signal

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SIGNAL CONDITIONING %%%%%%%%%%%%%%%%

proc_data=ephys_denoise_signal(EPHYS_DATA,CHANNELS,channels,'method',noise,'car_exclude',car_exclude);
clear EPHYS_DATA;
proc_data=single(ephys_condition_signal(proc_data,'l','freq_range',freq_range,'medfilt_scale',medfilt_scale));



% find subsection of histogram image to plot

startidx=max([find(HISTOGRAM.f<=min_f)]); 
stopidx=min([find(HISTOGRAM.f>=max_f)]);

% are we downsampling
% downsampling is done by skipping samples, straightforward

if ~isempty(downsampling)

	LFP_RASTER.t=downsample(TIME,downsampling);
	LFP_RASTER.image=zeros(ntrials,length(LFP_RASTER.t),length(channels),'single');

	for i=1:length(channels)
		LFP_RASTER.image(:,:,i)=downsample(proc_data(:,:,i),downsampling)';
	end

else
	LFP_RASTER.t=TIME;
	LFP_RASTER.image=zeros(ntrials,length(LFP_RASTER.t),length(channels),'single');

	for i=1:length(channels)
		LFP_RASTER.image(:,:,i)=proc_data(:,:,i)';
	end
end
LFP_RASTER.trials=[1:ntrials];

clear proc_data;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PLOTTING CODE %%%%%%%%%%%%%%%%%%%%%%

disp('Generating figures...');
disp(['Will save to directory:  ' savedir]);

% set up directories for output

if length(freq_range)==2
	subdir=[ num2str(freq_range(1)) '_' num2str(freq_range(2))];
else
	subdir=num2str(freq_range(1));
end


[path,name,ext]=fileparts(savedir);

savedir=fullfile(savedir,'lfp_amp');

if ~exist(fullfile(savedir,subdir),'dir')
	mkdir(fullfile(savedir,subdir));
end

savefilename=[ name '_lfpamp_freqrange_' num2str(freq_range) '_electrode_'];

% delete any old rasters

delete(fullfile(savedir,subdir,[savefilename '*.png']));
delete(fullfile(savedir,subdir,[savefilename '*.eps']));

for i=1:length(channels)

	ax=[];
	raster_fig=figure('visible','off','Units','Pixels','Position',[0 0 700 1e3]);

	reject=[];
	if ~isempty(hampel)	
		reject=hampel_filter(LFP_RASTER.image(:,:,i)','hampel_factor',hampel);
	end
	goodtrials=setdiff(LFP_RASTER.trials,reject);

	PLOTLFP=LFP_RASTER;
	PLOTLFP.trials=PLOTLFP.trials(goodtrials);
	PLOTLFP.image=PLOTLFP.image(goodtrials,:,i);

	multi_unit_raster(HISTOGRAM,PLOTLFP,'sr',SR,...
		'fig_num',raster_fig,'fig_title',{[figtitle];[ 'Channel ' num2str(channels(i))]},...
		'min_f',min_f,'max_f',max_f,'raster_colors',mua_colors,'hist_colors',hist_colors);

	set(raster_fig,'PaperPositionMode','auto')
	multi_fig_save(raster_fig,fullfile(savedir,subdir),...
		[ savefilename num2str(channels(i)) ],'eps,png');
	close([raster_fig]);

end

save(fullfile(savedir,subdir,['lfp_amp_freqrange_' num2str(freq_range) '.mat']),...
	'LFP_RASTER','channels','freq_range','CHANNELS','goodtrials','reject');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

