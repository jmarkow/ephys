function [LFP_RASTER TIME LABEL HISTOGRAM]=ephys_visual_lfp_spect(EPHYS_DATA,CHANNELS,varargin)
%this function is incomplete, use at your own risk

%intan_visual_mua.m takes data generated by intan_cluster.m and stored in extracted_data.mat
%and produces song_aligned multi-unit rasters.
%
%	[LFP_RASTER TIME LABEL HISTOGRAM]=ephys_visual_lfp_spect(EPHYS_DATA,CHANNELS,varargin)
%
%	MIC_DATA
%	aligned microphrone traces from extracted_data.mat (should be the variable mic_data)
%
%	EPHYS_DATA
%	aligned Intan data from extracted_data.mat (should be the variable ephys_data)
%
%	CHANNELS
%	channel labels (i.e. the channel that corresponds to a given element in the cell array
%	ephys_data) from extracted_data.mat
%
%	the following may be specified as parameter/value pairs:
%
%		exclude
%		electrodes to exclude from noise estimate
%
%		smooth_window
%		smoothing_window for multi-unit in seconds (default .005)
%
%		fs
%		data sampling rate (default: 25e3)
%
%		noise
%		noise rejection method (default: 'car', or common-average-rejection)
%
%		filtering
%		define as a two-element vector with lower and upper corner frequencies 
%		to filtering multi-unit traces (default: none)
%
%		dir
%		directory to store results (default: pwd)
%
%		min_f
%		lowermost frequency to display for contour histogram
%
%		max_f
%		uppermost frequency to display for contour histogram
%
%		colors
%		colormap for contour histogram and multi-unit data
%
%

if nargin<2 | isempty(CHANNELS), CHANNELS=1:16; end

nparams=length(varargin);

if mod(nparams,2)>0
	error('ephysPipeline:argChk','Parameters must be specified as parameter/value pairs!');
end

%%%

fs=25e3;
noise='none'; % common-average reference for noise removal
exclude=[];
filtering='y'; % if defined then filter the traces
dir=pwd;
hist_colors='jet';
mua_colors='hot';
figtitle='';
freq_range=[300]; % frequency range for filtering
channels=CHANNELS;
method='raw'; % raw or mt for multi-taper

for i=1:2:nparams
	switch lower(varargin{i})
		case 'fs'
			fs=varargin{i+1};
		case 'filtering'
			filtering=varargin{i+1};
		case 'dir'
			dir=varargin{i+1};
		case 'mua_colors'
			mua_colors=varargin{i+1};
		case 'hist_colors'
			hist_colors=varargin{i+1};
		case 'exclude'
			exclude=varargin{i+1};
		case 'figtitle'
			figtitle=varargin{i+1};
		case 'freq_range'
			freq_range=varargin{i+1};
		case 'channels'
			channels=varargin{i+1};
		case 'method'
			method=varargin{i+1};
	end
end

% intan nearest neighbor mapping

channel_map=[4 3 2 1 16 15 14 13 5 6 7 8 9 10 11 12];
channel_ref=[3 4 3 2 1 16 15 14 6 5 6 7 8 9 10 11];

% kernel for smoothing multi-unit, just use a Gauss here...

% what to exclude from CAR?

% need to write a function for automatically determining which electrodes to reject

exclude_channels=[];

for i=1:length(exclude)
	exclude_channels(i)=find(CHANNELS==exclude(i));
end

electrodes=setdiff(1:length(CHANNELS),exclude_channels); % which electrodes are good?

[samples,ntrials,nelectrodes]=size(EPHYS_DATA);
TIME=[1:samples]./fs;
LABEL=CHANNELS;

proc_data=zeros(samples,ntrials,length(channels));

for i=1:length(channels)
	channels(i)=find(channels(i)==CHANNELS);
end

disp('Referencing and filtering...');

switch lower(noise)
	case 'car'

		car=mean(EPHYS_DATA,3);
		raster_fig=figure('Visible','off');
		imagesc(TIME,1:ntrials,CAR);
		colormap(mua_colors);
		%multi_fig_save(raster_fig,dir,[ 'CAR' ],'eps,png');
		close([raster_fig]);


		for i=1:length(channels)
			proc_data(:,:,i)=EPHYS_DATA(:,:,i)-car;
		end

	case 'nn'

		for i=1:length(channels)
			proc_data(:,:,i)=EPHYS_DATA(:,:,i)-EPHYS_DATA(:,:,find(channel_map==i));
		end

	otherwise

		for i=1:length(channels)
			proc_data(:,:,i)=EPHYS_DATA(:,:,i);
		end

end

clear EPHYS_DATA;

for i=1:length(CHANNELS)

	disp(['Electrode ' num2str(CHANNELS(i))]);

	for j=1:ntrials

		if lower(filtering(1))=='y'

			[b,a]=butter(2,[freq_range]./(fs/2));
			proc_data(:,j,i)=single(filtfilt(b,a,double(proc_data(:,j,i)-mean(proc_data(:,j,i)))));
		
		end
		
	end

	
end


disp('Generating figures...');
disp(['Will save to directory:  ' dir]);

if ~exist(fullfile(dir,'lfp_spect'),'dir')
	mkdir(fullfile(dir,'lfp_spect'));
end

% scale pixels by time

[path,name,ext]=fileparts(dir);

savefilename=[ name '_lfp_spect_freqrange_' num2str(freq_range) '_electrode_'];

% delete any old rasters

%delete(fullfile(dir,'lfp_spect_',[savefilename '*.png']));
%delete(fullfile(dir,'lfp_spect_',[savefilename '*.eps']));

% compute average spectrum either rawfft or multi-taper

% plot mean LFP and average spectrum

for i=1:length(channels)

	ax=[];
	spect_fig=figure('visible','off','Units','Pixels','Position',[0 0 1e3 1.4e3]);

	mean_lfp=mean(proc_data(:,:,i)');
	sem_lfp=mean_lfp./sqrt(ntrials);

	ax(1)=subaxis(6,1,1,1,1,3,'margin',.1,'spacingvert',.1);

	lowerconf=mean_lfp-sem_lfp;
	upperconf=mean_lfp+sem_lfp;

	xdata=[TIME fliplr(TIME)];
	ydata=[lowerconf fliplr(upperconf)];

	ymin=floor(min(lowerconf));
	ymax=ceil(max(upperconf));

	patch(xdata,ydata,1,'facecolor',[.53 .81 1],'edgecolor','none');
	hold on;
	plot(TIME,mean_lfp,'-','color',[.4 .4 .4]);
	set(gca,'YTick',[ymin ymax],'TickDir','out','TickLength',[.02 .02],'layer','top');
	ylim([ymin-1 ymax+1]);
	box off	

	xlabel('Time (s)');

	if lower(method(1))=='r'
		[fftvec,fs]=ave_fft(proc_data(:,:,i),fs,'nfft',1e5,'freq_range',[25 100]);
	else
		[test,test2]=mt_spectrum(proc_data(:,1,i),fs,'nfft',1e5,'w',2);
		[m,n]=size(test);
		[m2,n2]=size(test2);
		fftvec=zeros(ntrials,n);
		fs=zeros(ntrials,n2);
		parfor j=1:ntrials
			[fftvec(j,:),fs(j,:)]=mt_spectrum(proc_data(:,j,i),fs,'nfft',1e5,'w',2);
		end
	end

	mean_spect=mean(fftvec);
	sem_spect=mean_spect./sqrt(ntrials);
	
	lowerconf=mean_spect-sem_spect;
	upperconf=mean_spect+sem_spect;

	xdata=[fs fliplr(fs)];
	ydata=[lowerconf fliplr(upperconf)];

	ymin=floor(min(lowerconf));
	ymax=ceil(max(upperconf));

	ax(2)=subaxis(6,1,1,4,1,2,'margin',.1,'spacingvert',.05);
	patch(xdata,ydata,1,'facecolor',[1 .71 .76],'edgecolor','none');
	hold on;
	plot(fs,mean_spect,'-','color',[.4 .4 .4]);
	%plot(timevec_ifr,ifr_mean+ifr_jackknife_sem,'r-.');
	%plot(timevec_ifr,ifr_mean-ifr_jackknife_sem,'r-.');
	set(gca,'YTick',[ymin ymax],'TickDir','out','TickLength',[.02 .02],'layer','top');
	xlabel('FS (Hz)','FontSize',13,'FontName','Helvetica');
	ylim([ymin-1 ymax+1]);
	box off

	if ~isempty(figtitle)
		name=figtitle;
	end

	set(spect_fig,'PaperPositionMode','auto')
	multi_fig_save(spect_fig,fullfile(dir,'lfp_spect'),...
		[ savefilename num2str(CHANNELS(channels(i))) ],'eps,png');
	close([spect_fig]);

end

%save(fullfile(dir,'lfp_spect',subdir,['lfp_spect_freqrange_' num2str(freq_range) '.mat']),'LFP_RASTER','channels','TIME','freq_range','CHANNELS');


